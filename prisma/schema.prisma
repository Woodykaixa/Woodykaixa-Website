// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// Represent a User
model User {
  /// MongoDB ObjectId
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  /// email to send notifications (maybe unused)
  email      String   @unique
  /// Displayed user name
  name       String
  /// A Hash string represents HASH(salt + password)
  password   String
  /// Blog URL
  blog       String?
  /// Bio
  bio        String?
  /// Is Admin. For now, there are only 1 admin, that's me!
  admin      Boolean
  /// Register date
  registerAt DateTime
  /// Present in friends list
  isFriend   Boolean  @default(false)

  /// user's avatars, latest -> oldest
  avatars   AvatarFile[] @relation
  avatarIds String[]     @db.Array(ObjectId)
  Comment   Comment[]
}

/// A file stored in OSS service.
model File {

  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId

  /// Full filename
  filename String @unique

  /// url to access the file
  url String

  type FileType

  /// File size in bytes
  size Int

  ImageFile  ImageFile[]
  PostFile   PostFile[]
  AvatarFile AvatarFile[]
}

model ImageFile {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId

  /// basename and ext. Because full name is set in File model
  filename String @unique

  height Int

  width Int

  /// posts referenced this image
  referencedBy      PostFile[] @relation(fields: [referencedPostIds])
  referencedPostIds String[]   @db.Array(ObjectId)

  File   File   @relation(fields: [fileId], references: [id])
  fileId String @db.ObjectId
}

// Because only I can publish posts, we don't need a userid field like example
model PostFile {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId

  /// The title of a post
  title String @unique

  /// first paragraph or first 20 words of a post
  brief String

  keywords String[] @db.Array(String)

  /// When this post is uploaded
  date DateTime

  File   File   @relation(fields: [fileId], references: [id])
  fileId String @db.ObjectId

  Comments Comment[] @relation
  comments String[]  @db.String

  /// If true, the first of referencedImages is the cover
  hasCover Boolean

  referencedImages   ImageFile[] @relation(fields: [referencedImageIds])
  referencedImageIds String[]    @db.Array(ObjectId)
}

model AvatarFile {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId

  /// basename and ext. Because full name is set in File model
  filename String @unique

  height Int

  width Int

  File   File   @relation(fields: [fileId], references: [id])
  fileId String @db.ObjectId

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

enum FileType {
  IMAGE
  POST
  AVATAR
}

model Comment {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId

  /// content of this comment
  content String

  /// reply to another comment
  replyCommentId String?   @db.ObjectId
  replyTo        Comment?  @relation("replyComment", fields: [replyCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments       Comment[] @relation("replyComment")

  /// author of this comment
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  /// comment to which post
  PostFile   PostFile? @relation(fields: [postFileId], references: [id])
  postFileId String?   @db.ObjectId
}
